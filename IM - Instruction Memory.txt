----------------------------------------------------------------------------------
-- Ingeniero:      Oscar Eduardo Tonusco Utima 
-- Codigo:         1090332961
-- Institucion:    Universidad Tecnol√≥gica de Pereira
-- Create Date:    23:16:11 12/04/2016
-- Design Name: 	 Instruction Memory para un procesador Sparc V8
-- Module Name:    IM - Instruction Memory
-- Project Name: 	 Procesador Monociclo Sparc V8
-- Revision 0.01 - File Created
-- Additional Comments: Sin Comentarios
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL; --permite operar entre los puertos del componente
use std.textio.all;					--libreria que permite trabajar con ficheros 

--Inicio IM
entity IM is
    Port ( DirEntIM : in  STD_LOGIC_VECTOR (31 downto 0);
			  clk : in STD_LOGIC;
           rst : in  STD_LOGIC;
           DirSalIM : out  STD_LOGIC_VECTOR (31 downto 0));
end IM;

architecture InstMem of IM is
	
	--variable que almacenara una matriz de 32*32
	type ROM64F is array (0 to 31) of std_logic_vector(31 downto 0);
	
	--funcion impure, no siempre devuelve los mismos valores en el return
	impure function romFile(nameFile : string) return ROM64F is
		File archivo : text open read_mode is nameFile;--variable file de tipo text que abre en modo lectura
		variable fila : line;--variable para capturar cada linea del fichero abierto
		variable temp : bit_vector(31 downto 0);--variable que almacena bit a bit el valor de la fila
		variable tempROM : ROM64F;--variable que almacena todo el fichero en un array
		begin
			for i in ROM64F'range loop
				readline(archivo,fila);--leyendo cada linea del fichero
				read(fila,temp);--leyendo y capturando los bits de la linea
				tempROM(i) := to_stdlogicvector(temp);
			end loop;
		return tempROM;
	end function;
	
	signal instructions : rom_type := InitRomFromFile("testJMPL.data");
		
begin
	process(rst, DirEntIM, inst, clk)
		begin
			if(rising_edge(clk)) then
				if(rst = '1') then
					DirSalIM <= (others=>'0');
				else
					DirSalIM <= inst(conv_integer(DirEntIM(5 downto 0)));--devuelve la instruccion en la posicion indicada de 0 a 31
				end if;
			end if;
		end process;
end InstMem;